// Generated by CoffeeScript 1.3.3
if (typeof define !== 'function') { var define = require('amdefine')(module) };

define(['underscore', './widgetInitializer', 'dustjs-linkedin'], function(_, widgetInitializer, dust) {
  var Widget;
  Widget = (function() {

    Widget.prototype.ctx = null;

    Widget.prototype.children = null;

    Widget.prototype.childByName = null;

    Widget.prototype.path = null;

    Widget.prototype.behaviourClass = null;

    Widget.prototype.getPath = function() {
      if (this.path != null) {
        return "" + this.path + this.constructor.name;
      } else {
        throw "path is not defined for widget " + this.constructor.name;
      }
    };

    function Widget(id) {
      this.children = [];
      this.childByName = {};
      this.ctx = {};
      this.ctx.id = id != null ? id : 'widget' + _.uniqueId();
    }

    Widget.prototype.loadContext = function(ctx) {
      return this.ctx = ctx;
    };

    Widget.prototype.show = function(params, callback) {
      return this.showAction('default', params, callback);
    };

    Widget.prototype.showJson = function(params, callback) {
      return this.jsonAction('default', params, callback);
    };

    Widget.prototype.showAction = function(action, params, callback) {
      var _this = this;
      return this["_" + action + "Action"](params, function() {
        return _this.renderTemplate(callback);
      });
    };

    Widget.prototype.jsonAction = function(action, params, callback) {
      var _this = this;
      return this["_" + action + "Action"](params, function() {
        return _this.renderJson(callback);
      });
    };

    /*
          Action that generates/modifies widget context according to the given params
          Should be overriden in particular widget
          @private
          @param Map params some arbitrary params for the action
          @param Function callback callback function that must be called after action completion
    */


    Widget.prototype._defaultAction = function(params, callback) {
      return callback();
    };

    Widget.prototype.renderJson = function(callback) {
      return callback(null, JSON.stringify(this.ctx));
    };

    Widget.prototype.getInitCode = function(parentId) {
      var name, namedChilds, parentStr, widget, _ref;
      parentStr = parentId != null ? ", '" + parentId + "'" : '';
      namedChilds = {};
      _ref = this.childByName;
      for (name in _ref) {
        widget = _ref[name];
        namedChilds[widget.ctx.id] = name;
      }
      return "wi.init('" + (this.getPath()) + "', " + (JSON.stringify(this.ctx)) + ", " + (JSON.stringify(namedChilds)) + parentStr + ");\n" + ((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.children;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          widget = _ref1[_i];
          _results.push(widget.getInitCode(this.ctx.id));
        }
        return _results;
      }).call(this));
    };

    Widget.prototype.registerChild = function(child, name) {
      this.children.push(child);
      if (name != null) {
        return this.childByName[name] = child;
      }
    };

    Widget.prototype.getBehaviourClass = function() {
      if (!(this.behaviourClass != null)) {
        this.behaviourClass = "" + this.path + this.constructor.name + "Behaviour";
      }
      console.log(this.behaviourClass);
      if (this.behaviourClass === false) {
        return null;
      } else {
        return this.behaviourClass;
      }
    };

    Widget.prototype.initBehaviour = function() {
      var behaviourClass,
        _this = this;
      behaviourClass = this.getBehaviourClass();
      console.log('initBehaviour', this.constructor.name, behaviourClass);
      if (behaviourClass != null) {
        console.log("require", behaviourClass);
        return require([behaviourClass], function(BehaviourClass) {
          var behaviour;
          console.log("loaded behaviour class " + behaviourClass);
          return behaviour = new BehaviourClass(_this);
        });
      }
    };

    Widget.prototype._baseContext = null;

    Widget.prototype.getBaseContext = function() {
      var _ref;
      return (_ref = this._baseContext) != null ? _ref : (this._baseContext = this._buildBaseContext());
    };

    Widget.prototype._buildBaseContext = function() {
      var _this = this;
      return dust.makeBase({
        widget: function(chunk, context, bodies, params) {
          return chunk.map(function(chunk) {
            var WidgetClass, widget;
            WidgetClass = require("./" + params["class"]);
            widget = new WidgetClass;
            _this.children.push(widget);
            if (params.name != null) {
              _this.childByName[params.name] = widget;
            }
            return widget.show(params, function(err, output) {
              if (err) {
                throw err;
              }
              return chunk.end("<div id=\"" + widget.ctx.id + "\">" + output + "</div>");
            });
          });
        },
        widgetInitializer: function(chunk, context, bodies, params) {
          return chunk.map(function(chunk) {
            return chunk.end(widgetInitializer.getTemplateCode());
          });
        }
      });
    };

    return Widget;

  })();
  return Widget;
});
