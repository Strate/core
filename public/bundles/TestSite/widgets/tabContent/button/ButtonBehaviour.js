// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../Behaviour', '../clientSideRouter'], function(Behaviour, Router) {
  var ButtonBehaviour;
  return ButtonBehaviour = (function(_super) {

    __extends(ButtonBehaviour, _super);

    ButtonBehaviour.prototype.cntClick = 0;

    function ButtonBehaviour() {
      var i;
      ButtonBehaviour.__super__.constructor.apply(this, arguments);
      i = parseInt(Router.getURLParameter('cntClick'));
      if (i) {
        this.cntClick = i;
      }
    }

    ButtonBehaviour.prototype.elements = {
      '.log-move': 'logMove',
      '.log-click': 'logClick'
    };

    ButtonBehaviour.prototype.events = {
      'click .btn': 'clickButton',
      'mousemove .btn': function(e) {
        return this.logMove.text("coords " + e.clientX + "x" + e.clientY + ", context " + this.widget.ctx.number);
      }
    };

    ButtonBehaviour.prototype.clickButton = function() {
      this.logClick.text("click " + (++this.cntClick) + ", context " + this.widget.ctx.number + ", path: " + (Router.getPath()));
      this.append('<div>test add </div>');
      return Router.navigate("" + (Router.getPath()) + "?cntClick=" + this.cntClick + "&ctx=" + this.widget.ctx.number, false);
    };

    return ButtonBehaviour;

  })(Behaviour);
});
